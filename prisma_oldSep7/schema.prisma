
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model Session {
//   id              String   @id
//   shop            String
//   state           String
//   isOnline        Boolean
//   scope           String?
//   expires         DateTime?
//   onlineAccessInfo String?
//   accessToken     String?
//   userId          String?
//   firstName       String?
//   lastName        String?
//   email           String?
//   accountOwner    Boolean?
//   locale          String?
//   collaborator    Boolean?
//   emailVerified   Boolean?
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
// }

// model Order {
//   id                 Int         @id @default(autoincrement())
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   shopifyOrderId     String      @unique
//   email              String
//   totalPrice         Float
//   subtotalPrice      Float
//   totalShippingPrice Float
//   refunds            Refund[]
//   lineItems          LineItem[]
//   customer           Customer    @relation(fields: [customerId], references: [id])
//   customerId         Int
// }

// model LineItem {
//   id       Int     @id @default(autoincrement())
//   orderId  Int
//   productId String
//   title    String
//   order    Order   @relation(fields: [orderId], references: [id])
// }

// model Refund {
//   id          Int     @id @default(autoincrement())
//   orderId     Int
//   refundId    String
//   amount      Float
//   note        String?
//   order       Order   @relation(fields: [orderId], references: [id])
// }

// model Customer {
//   id              Int         @id @default(autoincrement())
//   shopifyCustomerId String    @unique
//   email           String
//   firstName       String
//   lastName        String
//   orders          Order[]
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id               String    @id
  shop             String
  state            String
  isOnline         Boolean
  scope            String?
  expires          DateTime?
  onlineAccessInfo String?
  accessToken      String?
  userId           String?
  firstName        String?
  lastName         String?
  email            String?
  accountOwner     Boolean?
  locale           String?
  collaborator     Boolean?
  emailVerified    Boolean?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Order {
  id           String   @id @default(uuid()) // Unique order identifier
  name         String // Order name or number
  email        String? // Customer email (nullable)
  createdAt    DateTime // Order creation timestamp
  updatedAt    DateTime // Order update timestamp
  totalPrice   Float // Total price of the order
  currencyCode String // Currency code for the order

  // Customer Details
  customerId        String? // Customer ID (nullable)
  customerFirstName String? // Customer's first name (nullable)
  customerLastName  String? // Customer's last name (nullable)

  // Shipping Address Details
  shippingFirstName String? // Shipping first name (nullable)
  shippingLastName  String? // Shipping last name (nullable)
  address1          String? // Primary address line (nullable)
  address2          String? // Secondary address line (nullable)
  city              String? // City (nullable)
  province          String? // Province/State (nullable)
  country           String? // Country (nullable)
  zip               String? // Zip/Postal code (nullable)
  lineItems       OrderLineItem[]  // Relation field

  refunds Refund[] // Array of refunds associated with this order
}

model OrderLineItem {
  id          String  @id @default(cuid())
  orderId     String
  name        String
  title       String
  imageUrl    String?
  order       Order   @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model Refund {
  id              String           @id @default(uuid()) // Unique refund identifier
  amount          Float // Refund amount
  currencyCode    String // Currency code for the refund
  createdAt       DateTime // Refund creation timestamp
  orderId         String // Associated order ID
  note            String? // Refund note (nullable)
  order           Order            @relation(fields: [orderId], references: [id])
  refundLineItems RefundLineItem[]
}

model RefundLineItem {
  id         String @id @default(uuid())
  refundId   String
  refund     Refund @relation(fields: [refundId], references: [id])
  lineItemId String
  title      String
  quantity   Int
}
